{"openapi":"3.1.0","info":{"title":"FastAPI","version":"0.1.0"},"paths":{"/auth/register":{"post":{"tags":["auth"],"summary":"Pre-registration form","description":"Form to create temp user before verification of email. Used to check whenever account data is unique. Check UserTemp schema. Pass UserTemp body schema","operationId":"register_user_auth_register_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserTemp"}}},"required":true},"responses":{"200":{"description":"Returns positive status of pre-registration","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database or SMTP server"},"409":{"description":"Conflict. The main unique data is already exists for another user"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/verify-email":{"post":{"tags":["auth"],"summary":"Full account registration","description":"Account being created with full provided information about user. Additionally to user information, verification code from email is passed. Check UserCreate schema. Pass UserCreate body schema","operationId":"verify_email_auth_verify_email_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreate"}}},"required":true},"responses":{"200":{"description":"Returns positive status of registration and cookie for first account access","content":{"application/json":{"schema":{}}}},"406":{"description":"Bad verification code or this account is not needed for account"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/2fa/request":{"post":{"tags":["auth"],"summary":"First step for login","description":"First step for login to send verification code. Pass email and password fields of UserLogin body schema","operationId":"login_auth_2fa_request_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLogin"}}},"required":true},"responses":{"200":{"description":"Returns positive status of first step","content":{"application/json":{"schema":{}}}},"401":{"description":"Account is not exists or provided data is incorrect"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/2fa/confirm":{"post":{"tags":["auth"],"summary":"Last step for login","description":"Last step for login to end login process. Pass email and twofa_code fields of UserLogin body schema","operationId":"twofa_confirm_auth_2fa_confirm_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLogin"}}},"required":true},"responses":{"200":{"description":"Returns positive status of login and cookie for account access","content":{"application/json":{"schema":{}}}},"401":{"description":"Account is not exists or provided data is incorrect"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/me":{"get":{"tags":["auth"],"summary":"Base user data","description":"User must be logged into account to perform this option.","operationId":"get_user_base_data_auth_me_get","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"responses":{"200":{"description":"Returns base user data of user. Name and balance","content":{"application/json":{"schema":{}}}},"401":{"description":"Account is not exists, user not logged into account or provided data is incorrect"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/reset":{"post":{"tags":["auth"],"summary":"Reset password request","description":"Requesting reset password for account. To confirm it's actuall owner pass UserTemp body schema","operationId":"reset_password_request_auth_reset_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserTemp"}}},"required":true},"responses":{"200":{"description":"Returns positive status of sending reset link","content":{"application/json":{"schema":{}}}},"401":{"description":"Account is not exists or provided data is incorrect"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"patch":{"tags":["auth"],"summary":"Reset password confirm","description":"Confirmation of password resetting. Pass UserPasswordReset body schema","operationId":"reset_password_confirm_auth_reset_patch","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPasswordReset"}}},"required":true},"responses":{"200":{"description":"Returns positive status of process","content":{"application/json":{"schema":{}}}},"401":{"description":"Account is not requests password reset or token is incorrect"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/logout":{"post":{"tags":["auth"],"summary":"Log out","description":"User must be logged into account to perform this option.","operationId":"logout_auth_logout_post","responses":{"200":{"description":"Deleting the cookie","content":{"application/json":{"schema":{}}}}}}},"/cleanup-unverified":{"delete":{"tags":["miscallenious"],"summary":"Cleanup unverified users routine","description":"Endpoint created to cleanup users in 24h timespan. Used in routine","operationId":"cleanup_unverified_users_cleanup_unverified_delete","responses":{"200":{"description":"Each time is called returns amount of users deleted","content":{"application/json":{"schema":{}}}}}}},"/card/{four_digits}":{"get":{"tags":["card"],"summary":"Get single card by 4 last numbers","description":"User must be logged into account to perform this option. Provide into route of endpoint last 4 digits of card to get the card. Example: url/card/0443","operationId":"get_card_card__four_digits__get","parameters":[{"name":"four_digits","in":"path","required":true,"schema":{"type":"string","title":"Four Digits"}},{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"responses":{"200":{"description":"Returns all card information","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"500":{"description":"Function is not properly implemented, yet"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/card/create":{"post":{"tags":["card"],"summary":"Card creation","description":"User must be logged into account to perform this option. Creating card using information about user in database","operationId":"create_card_card_create_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"responses":{"200":{"description":"Returns card data","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"User for who card will be created has no wallet"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/card/delete":{"delete":{"tags":["card"],"summary":"Deleting card","description":"User must be logged into account to perform this option. Deleting card of user. Pass CardDelete body schema","operationId":"delete_card_card_delete_delete","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CardDelete"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"User for who card will be deleted has no wallet"},"403":{"description":"Card balance is positive. Cannot delete card with funds on it"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/card/transfer":{"post":{"tags":["card"],"summary":"Transfering money from card to card","description":"User must be logged into account to perform this option. Transfering money from card to card. Transfer operation will be added to history. Pass TransferRequest body schema","operationId":"transfer_money_card_transfer_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferRequest"}}}},"responses":{"200":{"description":"Returns how much money was transfered","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"Reciever/Sender for who transfering operation will be called has no wallet"},"403":{"description":"Sender has no funds to perform operation"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/card":{"get":{"tags":["card"],"summary":"Get list of user's cards","description":"User must be logged into account to perform this option. Getter for list of user cards. List contains of card data","operationId":"get_card_info_card_get","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"responses":{"200":{"description":"Returns list of cards data","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"User for who this operation will be called has no wallet"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/card/history":{"post":{"tags":["card"],"summary":"Get transfer history","description":"User must be logged into account to perform this option. Getter for list of transfers performed by user with n-card. Pass CardHistoryRequest body schema","operationId":"get_transfer_history_card_history_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CardHistoryRequest"}}}},"responses":{"200":{"description":"Return list of transfers","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"User for who this operation will be called has no wallet"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/savings/create":{"post":{"tags":["savings"],"summary":"Creation of saving account","description":"User must be logged into account to perform this option. Setting goal for users desire. Pass Saving_Account_creation body scheme","operationId":"create_saving_account_savings_create_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Saving_Account_creation"}}}},"responses":{"200":{"description":"Returns saving data on success","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"401":{"description":"Account is not exists, user not logged into account or provided data is incorrect"},"406":{"description":"User for who this operation will be called has no wallet"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/savings":{"get":{"tags":["savings"],"summary":"Getter for savings","description":"User must be logged into account to perform this option.","operationId":"get_saving_accounts_savings_get","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"responses":{"200":{"description":"Returns list of Saving_Account_out. Check schema","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Saving_Account_out"},"title":"Response Get Saving Accounts Savings Get"}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"401":{"description":"Account is not exists, user not logged into account or provided data is incorrect"},"406":{"description":"User for who this operation will be called has no wallet or saving account"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/savings/topUp":{"post":{"tags":["savings"],"summary":"Toping up savings","description":"User must be logged into account to perform this option. Used to topping up savings. Topping up is mirrored into transfer history. Pass Saving_Account_TopUp body scheme","operationId":"topUp_saving_account_savings_topUp_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Saving_Account_TopUp"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"401":{"description":"Account is not exists, user not logged into account or provided data is incorrect"},"403":{"description":"Forbidden wallet action. Savings are not existed or card which tried to pay with has no funds"},"406":{"description":"User for who this operation will be called has no wallet or saving account"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/savings/decrease":{"post":{"tags":["savings"],"summary":"Decreasing savings","description":"User must be logged into account to perform this option. Taking funds from savings to card. Pass Saving_Account_TopUp body scheme","operationId":"decrease_saving_account_savings_decrease_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Saving_Account_TopUp"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"401":{"description":"Account is not exists, user not logged into account or provided data is incorrect"},"403":{"description":"Forbidden wallet action. Card is not exists or savings which tried to decrease of has no funds"},"406":{"description":"User for who this operation will be called has no wallet or saving account"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/savings/delete":{"delete":{"tags":["savings"],"summary":"Deletes savings account","description":"User must be logged into account to perform this option. Deletes savings account. Pass Saving_Account_Delete body schema","operationId":"delete_saving_account_savings_delete_delete","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Saving_Account_Delete"}}}},"responses":{"200":{"description":"Returns id and status of deleted saving account","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"401":{"description":"Account is not exists, user not logged into account or provided data is incorrect"},"403":{"description":"Forbidden wallet action. Savings has positive amount of funds or savings is not exists"},"406":{"description":"User for who this operation will be called has no wallet"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bills/create":{"post":{"tags":["bills"],"summary":"Bill creation","description":"User must be logged into account to perform this option. Pass the BillCreate body schema to create bill in database","operationId":"create_bill_bills_create_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BillCreate"}}}},"responses":{"200":{"description":"Displaying the created bill","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"User for who bill will be created has no wallet"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bills":{"get":{"tags":["bills"],"summary":"Bill list getter","description":"User must be logged into account to perform this option. Returns the list of bills which user created earlier. Displays current values of each user's bills","operationId":"get_user_bills_bills_get","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"responses":{"200":{"description":"List of Bill. Check BillOut schema","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/BillOut"},"title":"Response Get User Bills Bills Get"}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"User for who bills will be shown has no wallet or actual bills"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bills/pay":{"post":{"tags":["bills"],"summary":"Paying of the bill","description":"User must be logged into account to perform this option. Bill paying is replicated into transfer history. Pass the BillPay body schema","operationId":"pay_bill_bills_pay_post","parameters":[{"name":"authorization","in":"cookie","required":false,"schema":{"type":"string","title":"Authorization"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BillPay"}}}},"responses":{"200":{"description":"Returns feedback information about card balance","content":{"application/json":{"schema":{}}}},"400":{"description":"Internal error accused by inprocessible data which crashed database"},"406":{"description":"User for who bill will be paid has no wallet, card to pay or actual bills"},"403":{"description":"Forbidden wallet action. Bill is paid off or card which tried to pay with has no funds"},"401":{"description":"Credential exception. User is not logged or cookie is corrupted"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/":{"get":{"summary":"Read Root","operationId":"read_root__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"BillCreate":{"properties":{"name":{"type":"string","title":"Name"},"amount":{"type":"number","title":"Amount"},"due_date":{"type":"string","format":"date-time","title":"Due Date"}},"type":"object","required":["name","amount","due_date"],"title":"BillCreate"},"BillOut":{"properties":{"id":{"type":"integer","title":"Id"},"name":{"type":"string","title":"Name"},"amount":{"type":"number","title":"Amount"},"due_date":{"type":"string","format":"date-time","title":"Due Date"},"paid":{"type":"boolean","title":"Paid"}},"type":"object","required":["id","name","amount","due_date","paid"],"title":"BillOut"},"BillPay":{"properties":{"bill_id":{"type":"integer","title":"Bill Id"},"card_number":{"type":"string","title":"Card Number"}},"type":"object","required":["bill_id","card_number"],"title":"BillPay"},"CardDelete":{"properties":{"card_number":{"type":"string","title":"Card Number"}},"type":"object","required":["card_number"],"title":"CardDelete"},"CardHistoryRequest":{"properties":{"card_number":{"type":"string","title":"Card Number"}},"type":"object","required":["card_number"],"title":"CardHistoryRequest"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"Saving_Account_Delete":{"properties":{"saving_account_id":{"type":"integer","title":"Saving Account Id"}},"type":"object","required":["saving_account_id"],"title":"Saving_Account_Delete"},"Saving_Account_TopUp":{"properties":{"amount":{"type":"number","title":"Amount"},"saving_account_id":{"type":"integer","title":"Saving Account Id"},"card_id":{"type":"integer","title":"Card Id"}},"type":"object","required":["amount","saving_account_id","card_id"],"title":"Saving_Account_TopUp"},"Saving_Account_creation":{"properties":{"name":{"type":"string","title":"Name"},"goal":{"type":"number","exclusiveMinimum":0.0,"title":"Goal","description":"Goal must be positive"}},"type":"object","required":["name","goal"],"title":"Saving_Account_creation"},"Saving_Account_out":{"properties":{"id":{"type":"integer","title":"Id"},"name":{"type":"string","title":"Name"},"balance":{"type":"number","title":"Balance"},"goal":{"type":"number","title":"Goal"},"remain":{"type":"number","title":"Remain"}},"type":"object","required":["id","name","balance","goal","remain"],"title":"Saving_Account_out"},"TransferRequest":{"properties":{"from_card_number":{"type":"string","title":"From Card Number"},"to_card_number":{"type":"string","title":"To Card Number"},"amount":{"type":"number","exclusiveMinimum":0.0,"title":"Amount","description":"Amount must be positive"}},"type":"object","required":["from_card_number","to_card_number","amount"],"title":"TransferRequest"},"UserCreate":{"properties":{"first_name":{"type":"string","title":"First Name"},"last_name":{"type":"string","title":"Last Name"},"email":{"type":"string","format":"email","title":"Email"},"phone_number":{"type":"string","title":"Phone Number"},"date_of_birth":{"type":"string","format":"date","title":"Date Of Birth"},"social_security":{"type":"string","title":"Social Security"},"address":{"type":"string","title":"Address"},"city":{"type":"string","title":"City"},"state":{"type":"string","title":"State"},"post_code":{"type":"string","title":"Post Code"},"password":{"type":"string","title":"Password"},"verification_code":{"type":"string","title":"Verification Code"}},"type":"object","required":["first_name","last_name","email","phone_number","date_of_birth","social_security","address","city","state","post_code","password","verification_code"],"title":"UserCreate"},"UserLogin":{"properties":{"email":{"type":"string","title":"Email"},"password":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Password"},"twofa_code":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Twofa Code"}},"type":"object","required":["email"],"title":"UserLogin"},"UserPasswordReset":{"properties":{"token":{"type":"string","title":"Token"},"new_password":{"type":"string","title":"New Password"}},"type":"object","required":["token","new_password"],"title":"UserPasswordReset"},"UserTemp":{"properties":{"email":{"type":"string","format":"email","title":"Email"},"phone_number":{"type":"string","title":"Phone Number"},"social_security":{"type":"string","title":"Social Security"}},"type":"object","required":["email","phone_number","social_security"],"title":"UserTemp"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}